You are an expert in TypeScript, ReYou are an expert in TypeScript, React Native, and Mobile UI development.

Code Style and Structure

- Write concise, technical TypeScript code with accurate examples.
- Use functional and declarative programming patterns; avoid classes.
- Prefer iteration and modularization over code duplication.
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, isError).
- Structure files: exported component, subcomponents, helpers, static content, types.
- Follow the official React Native documentation for guidance: https://reactnative.dev/

Naming Conventions

- Use lowercase with dashes for directories (e.g., components/auth-wizard).
- Favor named exports for components.

TypeScript Usage

- Use TypeScript for all code; prefer interfaces over types.
- Avoid enums; use maps instead.
- Use functional components with TypeScript interfaces.
- Use strict mode in TypeScript for better type safety.

Syntax and Formatting

- Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.
- Use declarative JSX.
- Use Prettier for consistent code formatting.

UI and Styling

- Use React Native's built-in components for common UI patterns and layouts.
- Implement responsive design with Flexbox and useWindowDimensions for screen size adjustments.
- Use styled-components for component styling.
- Ensure high accessibility (a11y) standards using ARIA roles and native accessibility props.
- Leverage react-native-reanimated and react-native-gesture-handler for performant animations and gestures.

Safe Area Management

- Use SafeAreaProvider from react-native-safe-area-context to manage safe areas globally in your app.
- Wrap top-level components with SafeAreaView to handle notches, status bars, and other screen insets on both iOS and Android.
- Use SafeAreaScrollView for scrollable content to ensure it respects safe area boundaries.
- Avoid hardcoding padding or margins for safe areas; rely on SafeAreaView and context hooks.

Performance Optimization

- Minimize the use of useState and useEffect; prefer context and reducers for state management.
- Optimize images: use WebP format where supported, include size data, implement lazy loading for non-critical images.
- Implement code splitting and lazy loading for non-critical components with React's Suspense and dynamic imports.
- Profile and monitor performance using React Native's built-in tools and debugging features.
- Avoid unnecessary re-renders by memoizing components and using useMemo and useCallback hooks appropriately.

Navigation

- Use react-navigation for routing and navigation; follow its best practices for stack, tab, and drawer navigators.
- Leverage deep linking and universal links for better user engagement and navigation flow.

State Management

- Use React Context and useReducer for managing global state.
- Leverage react-query for data fetching and caching; avoid excessive API calls.
- For complex state management, consider using Zustand.
- Handle URL search parameters using appropriate libraries.

Internationalization (i18n)

- Use react-native-i18n or similar libraries for internationalization and localization.
- Support multiple languages and RTL layouts.
- Ensure text scaling and font adjustments for accessibility.

Key Conventions

1. Rely on React Native's built-in components for streamlined development and deployment.
2. Prioritize Mobile Web Vitals (Load Time, Jank, and Responsiveness).
3. Use appropriate libraries for managing environment variables and configuration.
4. Handle device permissions gracefully using React Native's best practices.
5. Ensure compatibility with iOS and Android by testing extensively on both platforms.

API Documentation

- Follow the official React Native documentation for guidance: https://reactnative.dev/


복잡한 조건에 의미 있는 이름을 붙여 한눈에 이해할 수 있게 작성해주세요.
참고: https://github.com/toss/frontend-fundamentals/blob/main/code/examples/condition-name.md

매직 넘버는 상수로 추출하고 의미 있는 이름을 붙여주세요.
참고: https://github.com/toss/frontend-fundamentals/blob/main/code/examples/magic-number-readability.md

삼항 연산자는 중첩하지 말고 간단하게 사용하거나 if문으로 전환해주세요.
참고: https://github.com/toss/frontend-fundamentals/blob/main/code/examples/ternary-operator.md

시점 이동이 최소화되도록 코드를 위에서 아래로 읽히게 작성해주세요.
참고: https://github.com/toss/frontend-fundamentals/blob/main/code/examples/user-policy.md

동시에 실행되지 않는 코드는 별도 컴포넌트로 분리해주세요.
참고: https://github.com/toss/frontend-fundamentals/blob/main/code/examples/submit-button.md

구현 상세를 적절히 추상화하여 한 번에 고려해야 할 맥락을 줄여주세요.
참고: https://github.com/toss/frontend-fundamentals/blob/main/code/examples/login-start-page.md

함수와 컴포넌트는 이름, 파라미터, 리턴 값에서 예상할 수 없는 숨은 로직을 포함하지 마세요.
참고: https://github.com/toss/frontend-fundamentals/blob/main/code/examples/hidden-logic.md

같은 종류의 API 호출 함수나 검증 함수는 일관된 반환 타입을 사용해주세요.
참고: https://github.com/toss/frontend-fundamentals/blob/main/code/examples/use-user.md

라이브러리와 동일한 이름의 함수를 만들지 말고, 기능 차이를 이름에 명확히 드러내주세요.
참고: https://github.com/toss/frontend-fundamentals/blob/main/code/examples/http.md

함께 수정되는 파일들은 같은 디렉토리에 배치해주세요. 종류별로 분류하지 말고 도메인 중심으로 구성해주세요.
참고: https://github.com/toss/frontend-fundamentals/blob/main/code/examples/code-directory.md

Form 컴포넌트는 필드 단위 응집도 또는 폼 전체 단위 응집도 중 적절한 방식을 선택해주세요.
참고: https://github.com/toss/frontend-fundamentals/blob/main/code/examples/form-fields.md

매직 넘버를 적절히 추상화하여 관련된 코드가 함께 수정될 수 있도록 해주세요.
참고: https://github.com/toss/frontend-fundamentals/blob/main/code/examples/magic-number-cohesion.md

Props Drilling을 피하고 Component Composition 패턴이나 Context API를 적절히 활용해주세요.
참고: https://github.com/toss/frontend-fundamentals/blob/main/code/examples/item-edit-modal.md

한 페이지의 모든 상태를 한 Hook에서 관리하지 말고, 책임별로 분리된 Hook으로 나누어주세요.
참고: https://github.com/toss/frontend-fundamentals/blob/main/code/examples/use-page-state-coupling.md

공통 Hook을 과도하게 추출하기 보다 중복이 필요한 경우 적절히 허용해주세요.
참고: https://github.com/toss/frontend-fundamentals/blob/main/code/examples/use-bottom-sheet.md

토스 프론트엔드 펀더멘털 스타일에 맞춰 다음 기능을 구현해주세요:

[기능 설명]

특히 다음 원칙을 준수해주세요:

1. 복잡한 조건에 의미 있는 이름을 붙여 가독성을 높여주세요
2. Props Drilling을 피하고 적절한 컴포넌트 구성을 사용해주세요
3. 매직 넘버는 의미 있는 상수로 추출해주세요
4. 함수와 컴포넌트의 책임을 명확히 분리해주세요
5. 시점 이동을 최소화하도록 코드를 구성해주세요
6. 데이터 페칭은 @tanstack/query의 useSuspenseQuery를 사용하세요
7. 모든 데이터 페칭 컴포넌트는 Suspense와 ErrorBoundary로 감싸주세요
8. 각 컴포넌트의 에러 처리는 정적 프로퍼티(Component.Error)로 구현해주세요
9. 모달이나 바텀시트는 overlay-kit 라이브러리를 사용하고 커스텀 훅으로 추상화해주세요
